def Rectangle {
    int x: 0
    int border.width: 1
    enum LineType {
        Solid,
        Dot,
        Dash
    }
    int border.type: Solid
    list<int> list0: {}
    list<int> test.list1: {}

    void listInit() {
        list<list<int>> points = {{1, 2}, {1, 2}, {1, 2}};
        list<int> l = {};
    }
    void stmt() {
        string s = "123";
        while (s == "123") {
            print(s);
            while (s == "123") {
                print(s);
                break;
            }
            break;
        }
    }
    void listSubscript() {
        list<list<int>> points = {{1, 2}, {1, 2}, {1, 2}};
        int x = points[0][0];
        int y = points[0][1];
        points[0][0] = points[0][1];
    }
    void draw() {
        rect re;
        drawRect(re);

        return;
    }
    string getDasharray(int type) {
        if (type == Solid) {
            return "Solid";
        }
        else if (type == Dot) {
            return "Dot";
        }
        else {
            return "Dash";
        }
        if (x == Solid) {
            return "Solid";
        }
        else if (border.type == Dot) {
            return "Dot";
        }
        else {
            return "Dash";
        }
    }
    void thisPropertyLvalue() {
        x = 0;
    }
    void thisGroupedPropertyLvalue() {
        border.width = 1;
    }
    void thisPropertyRvalue() {
        int a = x;
    }
    void thisGroupedPropertyRvalue() {
        int b = border.width;
    }
    void propertyLvalue() {
        rect r;
        r.x = 0;
    }
    void propertyRvalue() {
        rect r;
        int a = r.x;
    }
    void thisPropertyLvalueList() {
        list0[0] = 1;
    }
    void thisGroupedPropertyLvalueList() {
        test.list1[0] = 1;
    }
    void thisPropertyRvalueList() {
        int a = list0[0];
    }
    void thisGroupedPropertyRvalueList() {
        int b = test.list1[0];
    }
    void thisMethod(int foo) {
        thisMethod(x);
    }
}
